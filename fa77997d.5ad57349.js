(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{110:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),o=(n(0),n(117)),i={id:"components",title:"Components",sidebar_label:"Components"},c={unversionedId:"concepts/components",id:"concepts/components",isDocsHomePage:!1,title:"Components",description:"Components are declared by implementing a simple trait:",source:"@site/docs/general/concepts/components.md",slug:"/concepts/components",permalink:"/docs/concepts/components",editUrl:"https://github.com/polyhorn/polyhorn.github.io/edit/master/docs/general/concepts/components.md",version:"current",sidebar_label:"Components",sidebar:"someSidebar",previous:{title:"Introduction",permalink:"/docs/concepts/"},next:{title:"Elements",permalink:"/docs/concepts/elements"}},l=[{value:"Properties",id:"properties",children:[{value:"Example",id:"example",children:[]},{value:"Default Values",id:"default-values",children:[]}]},{value:"Rendering",id:"rendering",children:[{value:"Children",id:"children",children:[]}]},{value:"Roadmap",id:"roadmap",children:[]}],s={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Components are declared by implementing a simple trait:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"pub trait Component {\n    fn render(self, manager: &mut Manager) -> Element;\n}\n")),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"If you're familiar with React, this should look familiar. One noticeable\ndifference is the ",Object(o.b)("inlineCode",{parentName:"p"},"manager")," parameter. Unlike React, we don't use global state to\nfacilitate ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/hooks/"}),"hooks"),". Instead, we use a manager to expose\nthat functionality."))),Object(o.b)("h2",{id:"properties"},"Properties"),Object(o.b)("h3",{id:"example"},"Example"),Object(o.b)("p",null,"We start by defining a new struct called ",Object(o.b)("inlineCode",{parentName:"p"},"Animal"),". Please note that the\n",Object(o.b)("inlineCode",{parentName:"p"},"Component")," trait must also be implemented for this new type, but we will\ncome back to that in ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#rendering"}),"Rendering"),"."),Object(o.b)("p",null,"All fields of this struct must be public if you want to be able to construct\nelements of this component in other modules. Also note that Rust naming\nconvention dictates that all field members are in ",Object(o.b)("inlineCode",{parentName:"p"},"snake_case"),". For example,\n",Object(o.b)("inlineCode",{parentName:"p"},"onPress")," in React is ",Object(o.b)("inlineCode",{parentName:"p"},"on_press")," in Polyhorn."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust",metastring:'title="src/animal.rs"',title:'"src/animal.rs"'}),"pub struct Animal {\n    pub name: String,\n    pub is_endangered: bool,\n}\n\nimpl Component for Animal { ... }\n")),Object(o.b)("p",null,"The component ",Object(o.b)("inlineCode",{parentName:"p"},"Animal")," can be used to build an element with xml-like syntax.\nRead more about elements ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/concepts/elements"}),"here"),", or\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/concepts/#overview"}),"get an overview")," of the relationships between\ncomponents, elements and instances."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'}),'poly!(<Animal name="Polar Bear" is_endangered=true />)\n')),Object(o.b)("h3",{id:"default-values"},"Default Values"),Object(o.b)("p",null,"Sometimes, you don't want to have to provide all values to a component. If a\ncomponent implements the ",Object(o.b)("inlineCode",{parentName:"p"},"Default")," trait (which can be done automatically by\nderiving it), we can use default syntax when constructing an element of this\ncomponent."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust",metastring:'{1} title="src/animal.rs"',"{1}":!0,title:'"src/animal.rs"'}),'#[derive(Default)]\npub struct Animal {\n    pub name: String,        // default = ""\n    pub is_endangered: bool, // default = false\n}\n')),Object(o.b)("p",null,"The default syntax refers to the ",Object(o.b)("inlineCode",{parentName:"p"},"...")," at the end of an element. After the ",Object(o.b)("inlineCode",{parentName:"p"},"..."),",\nno other properties are allowed. This only works if the component has implemented\nor derived ",Object(o.b)("inlineCode",{parentName:"p"},"Default"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'}),'poly!(<Animal name="Polar Bear" ... />)\n')),Object(o.b)("h4",{id:"custom-default-values"},"Custom Default Values"),Object(o.b)("p",null,"The default value for any type is provided by ",Object(o.b)("inlineCode",{parentName:"p"},"T::default()"),". For example, for\nbooleans, this is ",Object(o.b)("inlineCode",{parentName:"p"},"bool::default() = false"),". Sometimes, you might want it to be\n",Object(o.b)("inlineCode",{parentName:"p"},"true")," instead. Or you want a default string value. In those cases, we recommend\nusing the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://crates.io/crates/smart-default"}),Object(o.b)("inlineCode",{parentName:"a"},"smart-default")," crate"),",\nwhich is fully compatible with Polyhorn."),Object(o.b)("h2",{id:"rendering"},"Rendering"),Object(o.b)("h3",{id:"children"},"Children"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust",metastring:'title="src/example.rs"',title:'"src/example.rs"'}),"fn render(self, manager: &mut Manager) -> Element {\n    poly!(<View style={ style! {\n        background_color: Color::red()\n    } }>\n        { manager.children() }\n    </View>)\n}\n")),Object(o.b)("h2",{id:"roadmap"},"Roadmap"),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"There are some remaining issues with components. We would really appreciate\nyour input at our ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/polyhorn/polyhorn"}),"Github"),"."),Object(o.b)("ol",{parentName:"div"},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Currently, children are accessed through the manager. In React, children are\nproperties instead. For example, this is how Polyhorn currently works:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"pub struct MountainView {\n    // Empty\n}\n\nimpl Component for MountainView {\n    fn render(&self, manager: &mut Manager) -> Element {\n        poly!(<View>\n            { manager.children() }\n        </View>)\n    }\n}\n")),Object(o.b)("p",{parentName:"li"},"And this is how Polyhorn would work according to React's original\nimplementation:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"pub struct MountainView {\n    pub children: Element,\n}\n\nimpl Component for MountainView {\n    fn render(&self, manager: &mut Manager) -> Element {\n        poly!(<View>\n            { self.children }\n        </View>)\n    }\n}\n")),Object(o.b)("p",{parentName:"li"},"React's implementation has several advantages:"),Object(o.b)("ol",{parentName:"li"},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"It's possible to write components that do not accept children (like\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/components/status-bar/"}),"StatusBar"),"). Polyhorn would be able to generate\na compile-time error when children are passed to components that\ndo not accept them.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Children do not necessarily have to be elements at all. For example, this\nmight hypothetically be allowed in the future:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"pub struct MountainView {\n    pub children: Vec<u32>,\n}\n\npoly!(<MountainView>\n  { vec![1984] }\n</MountainView>)\n")))))))))}p.isMDXComponent=!0},117:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,u=m["".concat(i,".").concat(d)]||m[d]||b[d]||o;return n?r.a.createElement(u,c(c({ref:t},s),{},{components:n})):r.a.createElement(u,c({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);