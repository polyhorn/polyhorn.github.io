(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{117:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),b=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=b(n),d=i,m=u["".concat(o,".").concat(d)]||u[d]||p[d]||r;return n?a.a.createElement(m,l(l({ref:t},c),{},{components:n})):a.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},65:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var i=n(2),a=n(6),r=(n(0),n(117)),o={id:"style",title:"Style",sidebar_label:"Style",hide_title:!0},l={unversionedId:"style",id:"style",isDocsHomePage:!1,title:"Style",description:"Unstable",source:"@site/docs/api/style.md",slug:"/style",permalink:"/api/style",editUrl:"https://github.com/polyhorn/polyhorn.github.io/edit/master/docs/api/style.md",version:"current",sidebar_label:"Style",sidebar:"apiSidebar",previous:{title:"ImageSource",permalink:"/api/image-source"}},s=[{value:"Declaration",id:"declaration",children:[]},{value:"Roadmap",id:"roadmap",children:[]}],c={rightToc:s};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("span",{className:"badge badge--danger"},"Unstable"),Object(r.b)("h1",{style:{marginTop:0}},"Style"),Object(r.b)("h2",{id:"declaration"},"Declaration"),Object(r.b)("p",null,"Styles in Polyhorn are modelled after CSS due to the fact that most developers\nare already familiar with it."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Definition"',title:'"Definition"'}),"pub struct Style {\n    /// Layout\n    pub position: Position,\n    pub flex_direction: FlexDirection,\n    pub align_items: AlignItems,\n    pub justify_content: JustifyContent,\n    pub flex_basis: Dimension,\n    pub flex_grow: f32,\n    pub flex_shrink: f32,\n    pub min_width: Dimension,\n    pub min_height: Dimension,\n    pub width: Dimension,\n    pub height: Dimension,\n    pub max_width: Dimension,\n    pub max_height: Dimension,\n    pub margin: Margin,\n    pub padding: Padding,\n\n    /// Appearance\n    pub background_color: Color,\n    pub border_radius: BorderRadius,\n    pub opacity: f32,\n    pub visibility: Visibility,\n}\n")),Object(r.b)("p",null,"Positions are used by the layout algorithm to determine if the size of an\nelement should affect the layout of others. If an element has a absolute\nposition, it is not included in the layout computation. Of course, the children\nof an absolute element are included in the layout computation as long as they\nare relative."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Definition"',title:'"Definition"'}),"pub enum Position {\n    Absolute,\n    Relative,\n}\n")),Object(r.b)("p",null,"Dimensions are like CSS units. They can be undefined (which is the default), or\nauto (which is similar, sometimes), pixels (absolute) or a percentage\n(relative). The difference between undefined and auto depends on the use case.\nFor example, an undefined margin-left is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"0px"),", whereas an auto\nmargin-left will push the element as far to the right as possible. Refer to the\nCSS reference for more information."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Definition"',title:'"Definition"'}),"pub enum Dimension {\n    Undefined,\n    Auto,\n    Pixels(f32),\n    Percent(f32),\n}\n")),Object(r.b)("p",null,"Border radius is used to add rounded corners to an element and defined as a\nstructure of four dimensions (one for each corner)."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Definition"',title:'"Definition"'}),"pub struct BorderRadius {\n    pub top_leading: Dimension,\n    pub top_trailing: Dimension,\n    pub bottom_trailing: Dimension,\n    pub bottom_leading: Dimension,\n}\n")),Object(r.b)("p",null,"In the future, we might want two dimensions for each corner (one for the\nhorizontal radius and another for the vertical radius)."),Object(r.b)("h2",{id:"roadmap"},"Roadmap"),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("ol",{parentName:"div"},Object(r.b)("li",{parentName:"ol"},"Currently, ",Object(r.b)("inlineCode",{parentName:"li"},"Style<P>")," is actually generic with respect to a ",Object(r.b)("inlineCode",{parentName:"li"},"Platform")," that\nprovides a ",Object(r.b)("inlineCode",{parentName:"li"},"Color")," and ",Object(r.b)("inlineCode",{parentName:"li"},"Font")," using associated types. It might be worth\nconsidering making style entirely platform-independent."),Object(r.b)("li",{parentName:"ol"},"Due to the fact that ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"/api/color/"}),"Color")," is not yet copy-able, style in its\nentirety is not."),Object(r.b)("li",{parentName:"ol"},"The actual layout algorithm is located in ",Object(r.b)("inlineCode",{parentName:"li"},"polyhorn-layout")," and converts\ntypes like ",Object(r.b)("inlineCode",{parentName:"li"},"AlignItems")," either to corresponding types of\n",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/vislyhq/stretch"}),"Stretch")," or\n",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bschwind/yoga-rs"}),"Yoga (rs)"),". Unfortunately, Stretch is\nnot fast enough when dealing with dynamically sized leaf nodes (such as text)\nand Yoga itself is written in (unsafe) C++ and its bindings are written in\nan older version of Rust and uses an incompatible version of bindgen."),Object(r.b)("li",{parentName:"ol"},"Many variants of our layout parameters (e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"AlignItems::*"),") are available\nin both Stretch and Yoga, but not yet exported through ",Object(r.b)("inlineCode",{parentName:"li"},"polyhorn-style")," until\nwe have a proper method of testing them.")))))}b.isMDXComponent=!0}}]);