(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{130:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(i,".").concat(d)]||p[d]||b[d]||o;return n?a.a.createElement(m,l(l({ref:t},s),{},{components:n})):a.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(2),a=(n(0),n(130));const o={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},i={unversionedId:"getting-started",id:"getting-started",isDocsHomePage:!0,title:"Getting Started",description:"Polyhorn is a Rust library for building user interfaces. For users familiar",source:"@site/docs/general/getting-started.md",slug:"/",permalink:"/docs/",editUrl:"https://github.com/polyhorn/polyhorn.github.io/edit/master/docs/general/getting-started.md",version:"current",sidebar_label:"Getting Started",sidebar:"someSidebar",next:{title:"Why Polyhorn?",permalink:"/docs/why-polyhorn"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Start a Project",id:"start-a-project",children:[]},{value:"Run a Project",id:"run-a-project",children:[{value:"Running on iOS",id:"running-on-ios",children:[]}]},{value:"Roadmap",id:"roadmap",children:[]}],c={rightToc:l};function s({components:e,...t}){return Object(a.b)("wrapper",Object(r.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Polyhorn")," is a Rust library for building user interfaces. For users familiar\nwith React or React Native, this library will be very similar in purpose."),Object(a.b)("p",null,"It also comes with its own command line interface that makes it easy to start a\nnew project and to build and run existing projects."),Object(a.b)("p",null,"Colloquially, both are called Polyhorn."),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("p",null,"Installation of Polyhorn is easy and takes just a few seconds. If you're new to\nRust, you also need to install Rust first with step 1 below. If you're already\nusing Rust, you can skip step 1 and install Polyhorn with step 2."),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("strong",{parentName:"li"},"If you don't already have Rust installed,")," install Rust with rustup.",Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"curl -sSf https://sh.rustup.rs | sh\n"))),Object(a.b)("li",{parentName:"ol"},"Now, install Polyhorn with cargo, the Rust-provided package manager.",Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"cargo install polyhorn\n")))),Object(a.b)("h2",{id:"start-a-project"},"Start a Project"),Object(a.b)("p",null,"Starting a new project from one of our built-in templates is easy. For an\nalmost blank project, run:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"polyhorn new hello-world\n")),Object(a.b)("p",null,"You can replace ",Object(a.b)("inlineCode",{parentName:"p"},"hello-world")," with the name of your app. Make sure it contains\nonly alphanumerical characters and dashes."),Object(a.b)("p",null,"This will generate a directory with the following structure:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-k"}),"hello-world/\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 Polyhorn.toml\n\u251c\u2500\u2500 assets\n\u2502   \u2514\u2500\u2500 .gitkeep\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 lib.rs\n")),Object(a.b)("p",null,"This is the content of ",Object(a.b)("inlineCode",{parentName:"p"},"src/lib.rs"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'```rust\nuse polyhorn::prelude::*;\n\n#[derive(Default)]\npub struct App {}\n\nimpl Component for App {\n    fn render(&self, _manager: &mut Manager) -> Element {\n        poly!(<Window>\n            <View style=!{\n                align-items: center;\n                justify-content: center;\n                background-color: red;\n                height: 100%;\n            }>\n                <Text style=!{ color: white; }>\n                    "Welcome to your Polyhorn app!"\n                </Text>\n            </View>\n        </Window>)\n    }\n}\n\npolyhorn::render!(<App />);\n')),Object(a.b)("h2",{id:"run-a-project"},"Run a Project"),Object(a.b)("p",null,"In your command line, navigate to your project. For example, if you followed the\ninstructions above, you should now be in ",Object(a.b)("inlineCode",{parentName:"p"},"hello-world/"),". Then, decide on\nwhich platform you want to run. Note that all platforms share the same codebase,\nso you don't need to plan ahead."),Object(a.b)("h3",{id:"running-on-ios"},"Running on iOS"),Object(a.b)("p",null,"If you want to run your app on an iOS simulator, run this command:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"$ polyhorn run ios\n")),Object(a.b)("p",null,"It will ask you to select an available simulator."),Object(a.b)("h2",{id:"roadmap"},"Roadmap"),Object(a.b)("div",{className:"admonition admonition-info alert alert--info"},Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"It's not yet as easy to run the app on a physical device. It requires\nbuilding the runtime library for all iOS architectures supported by Rust and\nbundling them into a fat library using ",Object(a.b)("inlineCode",{parentName:"p"},"cargo-lipo"),". Then, drag the resulting\nlibrary into the project that is generated for the simulator build (replacing\nthe existing library), select a target device and run your app."),Object(a.b)("p",{parentName:"div"},"Suffices to say: this will be fixed very soon (less than one week after you\nread this)."))))}s.isMDXComponent=!0}}]);