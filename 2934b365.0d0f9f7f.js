(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{130:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var r=t(0),o=t.n(r);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),p=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,b=u["".concat(a,".").concat(m)]||u[m]||d[m]||c;return t?o.a.createElement(b,i(i({ref:n},l),{},{components:t})):o.a.createElement(b,i({ref:n},l))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,a=new Array(c);a[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var l=2;l<c;l++)a[l]=t[l];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},70:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var r=t(2),o=t(6),c=(t(0),t(130)),a={id:"instances",title:"Instances",sidebar_label:"Instances"},i={unversionedId:"concepts/instances",id:"concepts/instances",isDocsHomePage:!1,title:"Instances",description:"The first time Polyhorn encounters a particular element, it will create a new",source:"@site/docs/general/concepts/instances.md",slug:"/concepts/instances",permalink:"/docs/concepts/instances",editUrl:"https://github.com/polyhorn/polyhorn.github.io/edit/master/docs/general/concepts/instances.md",version:"current",sidebar_label:"Instances",sidebar:"someSidebar",previous:{title:"Elements",permalink:"/docs/concepts/elements"},next:{title:"Hooks",permalink:"/docs/hooks/"}},s=[],l={rightToc:s};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"The first time Polyhorn encounters a particular element, it will create a new\ncorresponding Instance. On each subsequent render, it will update the existing\nInstance with the new specification from the corresponding element."),Object(c.b)("p",null,"For example, imagine two subsequent renders:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'pub struct MountainView {\n    pub residents: Vec<String>,\n}\n\n// First render:\n<MountainView residents={ vec!["Steve Jobs"] } />\n\n// Second render:\n<MountainView residents={ vec![] } />\n')),Object(c.b)("p",null,"First of all, observe that there is only one\n",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/concepts/components/"}),"component"),": MountainView. At each render, a new\n",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/concepts/elements/"}),"element")," is created. An instance is created during\nthe first render (with a non-empty residents vector). At the second render,\nPolyhorn automatically recognizes that these elements are related and updates\nthe existing instance to reflect the now-empty residents vector. This is called\nreconciliation: relating potentially new elements with existing instances."))}p.isMDXComponent=!0}}]);