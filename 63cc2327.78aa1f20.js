(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{117:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),p=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=p(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},f=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),f=r,b=m["".concat(i,".").concat(f)]||m[f]||u[f]||o;return t?a.a.createElement(b,c(c({ref:n},s),{},{components:t})):a.a.createElement(b,c({ref:n},s))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=f;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},78:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var r=t(2),a=t(6),o=(t(0),t(117)),i={id:"reference-hooks",title:"Reference Hooks",sidebar_label:"Reference Hooks"},c={unversionedId:"hooks/reference-hooks",id:"hooks/reference-hooks",isDocsHomePage:!1,title:"Reference Hooks",description:"Overview",source:"@site/docs/general/hooks/reference.md",slug:"/hooks/reference-hooks",permalink:"/docs/hooks/reference-hooks",editUrl:"https://github.com/polyhorn/polyhorn.github.io/edit/master/docs/general/hooks/reference.md",version:"current",sidebar_label:"Reference Hooks",sidebar:"someSidebar",previous:{title:"Effect Hooks",permalink:"/docs/hooks/effect-hooks"},next:{title:"Context Hooks",permalink:"/docs/hooks/context-hooks"}},l=[{value:"Overview",id:"overview",children:[]},{value:"Declaration",id:"declaration",children:[]},{value:"Usage",id:"usage",children:[{value:"Imperative Component Handles",id:"imperative-component-handles",children:[]},{value:"Auxiliary References",id:"auxiliary-references",children:[]}]},{value:"API Reference",id:"api-reference",children:[]},{value:"Roadmap",id:"roadmap",children:[]}],s={rightToc:l};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"Sometimes, you might want to write imperative code to manipulate a component.\nFor example, we might want to automatically focus a text field after it is\nmounted. Or we might want to associate a WebSocket with a component. This can\nbe done with references. Conceptually, references are quite similar to state\nwith one notable difference: references don't have to be serializable."),Object(o.b)("h2",{id:"declaration"},"Declaration"),Object(o.b)("p",null,"The reference hook is declared via a ",Object(o.b)("inlineCode",{parentName:"p"},"UseReference")," trait. The hook can be used\non any type that implements this trait."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Definition"',title:'"Definition"'}),"pub trait UseReference {\n    fn use_reference<T>(&mut self, key: Key);\n}\n")),Object(o.b)("p",null,"It is recommended to use the macro instead of interfacing with the trait\ndirectly. The macro will generate a unique invocation ID that is used as its\nkey."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Definition"',title:'"Definition"'}),"use_reference!($manager:expr) => {\n    UseReference::use_reference($manager, use_id!())\n}\n")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("h3",{id:"imperative-component-handles"},"Imperative Component Handles"),Object(o.b)("p",null,"We start by writing an implementation of a form field component. The form field\nhas a property ",Object(o.b)("inlineCode",{parentName:"p"},"reference")," that users of this component can pass a ",Object(o.b)("inlineCode",{parentName:"p"},"Reference"),"\nto. The reference itself is owned by the form and usually contains a weak\npointer to the handle's state."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Example"',title:'"Example"'}),"pub struct Field {\n    reference: Reference<FieldHandle>,\n}\n\npub struct FieldHandle(...);\n\nimpl FieldHandle {\n    pub fn focus(&mut self);\n}\n\nimpl Component for Field {\n    fn render(&self, manager: &mut Manager) -> Element {\n        self.reference.replace(FieldHandle(...));\n\n        ...\n    }\n}\n")),Object(o.b)("p",null,"Next, we implement the form. For illustrative purposes, we also implement an\neffect that will call ",Object(o.b)("inlineCode",{parentName:"p"},"FieldHandle::focus")," after the form is mounted but\nbefore it is shown to the user."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Example"',title:'"Example"'}),"pub struct Form;\n\nimpl Component for Form {\n    fn render(&self, manager: &mut Manager) -> Element {\n        let field_ref = use_reference!(manager);\n \n        use_effect!(manager, {\n            let field_ref = field_ref.clone();\n\n            move |_| {\n                field_ref.apply(|handle| handle.focus());\n            }\n        })\n\n        poly!(<Field reference=field_ref />)\n    }\n}\n")),Object(o.b)("h3",{id:"auxiliary-references"},"Auxiliary References"),Object(o.b)("p",null,"We can also use reference hooks to store other imperative resources, such as\nweb sockets. In this example, we connect to a web socket and store it in a\nreference. The web socket is automatically dropped when the component is\nunmounted."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Example"',title:'"Example"'}),'fn render(&self, manager: &mut Manager) -> Element {\n    let websocket_ref = use_reference!(manager);\n \n    if websocket_ref.is_none() {\n        websocket_ref.replace(WebSocket::connect("..."));\n    }\n \n    ...\n}\n')),Object(o.b)("h2",{id:"api-reference"},"API Reference"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Definition"',title:'"Definition"'}),"pub struct Reference<T> { ... }\n\nimpl<T> Reference<T> {\n    pub fn is_some(&self) -> bool;\n    pub fn is_none(&self) -> bool;\n\n    /// Replaces the current value with the given value and returns the old\n    /// value. Returns None if the reference has expired.\n    pub fn replace(&self, value: T) -> Option<T>;\n\n    /// Invokes the given closure with a mutable reference to the reference's\n    /// value. If the reference has expired (i.e. the owning component is\n    /// unmounted), this function returns `None` without invoking the closure.\n    pub fn apply<F, O>(&self, transform: F) -> Option<O>\n    where\n        F: FnOnce(&mut T) -> O;\n}\n")),Object(o.b)("h2",{id:"roadmap"},"Roadmap"),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"There are some open issues related to the memory model of context. If you have\nthoughts, please let us know on\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/polyhorn/polyhorn"}),"our Github"),"."),Object(o.b)("ol",{parentName:"div"},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"References are currently similar to shared ",Object(o.b)("inlineCode",{parentName:"p"},"Option<T>"),"s and initialized\nwith ",Object(o.b)("inlineCode",{parentName:"p"},"None"),". In order to initialize a reference with a specific value,\ncurrently this is needed:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'let ws = use_reference!(manager);\n\nif ws.is_none() {\n    ws.replace(WebSocket::connect("..."));\n}\n')),Object(o.b)("p",{parentName:"li"},"Clearly, there are a few common use cases that don't need the reference to\nbehave like an ",Object(o.b)("inlineCode",{parentName:"p"},"Option<T>"),". We need to address those and build a more\nergonomic way to initialize references.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Unlike ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/hooks/state-hooks"}),"state"),", references fail silently if accessed\nafter they expire (i.e. after the owning component is unmounted)."))))))}p.isMDXComponent=!0}}]);