(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{130:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),u=o,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||a;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var o=n(2),r=(n(0),n(130));const a={id:"context-hooks",title:"Context Hooks",sidebar_label:"Context Hooks"},i={unversionedId:"hooks/context-hooks",id:"hooks/context-hooks",isDocsHomePage:!1,title:"Context Hooks",description:"Overview",source:"@site/docs/general/hooks/context.md",slug:"/hooks/context-hooks",permalink:"/docs/hooks/context-hooks",editUrl:"https://github.com/polyhorn/polyhorn.github.io/edit/master/docs/general/hooks/context.md",version:"current",sidebar_label:"Context Hooks",sidebar:"someSidebar",previous:{title:"Reference Hooks",permalink:"/docs/hooks/reference-hooks"},next:{title:"Android",permalink:"/docs/platforms/android"}},c=[{value:"Overview",id:"overview",children:[]},{value:"Declaration",id:"declaration",children:[{value:"Provider",id:"provider",children:[]},{value:"Consumers",id:"consumers",children:[]}]},{value:"Roadmap",id:"roadmap",children:[]}],s={rightToc:c};function l({components:e,...t}){return Object(r.b)("wrapper",Object(o.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"Sometimes, you might want to pass properties down several levels deep. This\nquickly becomes cumbersome. Instead, context hooks facilitate a way of passing\nvalues down the tree with minimal overhead."),Object(r.b)("p",null,"This is the recommended way to pass websockets, local database handles,\nthemes, etc."),Object(r.b)("h2",{id:"declaration"},"Declaration"),Object(r.b)("p",null,"Context hooks consist of two parts: one provider and zero or more consumers.\nA provider can supply Polyhorn with a value by using the built-in\nContextProvider component. Consumers can retrieve that value by using the\nUseContext hook."),Object(r.b)("h3",{id:"provider"},"Provider"),Object(r.b)("p",null,"A provider can supply Polyhorn with a value by using the built-in\nContextProvider component. The ContextProvider is generic with respect to ",Object(r.b)("inlineCode",{parentName:"p"},"T"),":\nthe context type."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-rust",metastring:'title="definition"',title:'"definition"'}),"pub struct ContextProvider<T> {\n    pub value: T,\n}\n")),Object(r.b)("h3",{id:"consumers"},"Consumers"),Object(r.b)("p",null,"The context hook is declared via a ",Object(r.b)("inlineCode",{parentName:"p"},"UseContext")," trait. The hook can be used on\nany type that implements this trait."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Definition"',title:'"Definition"'}),"pub trait UseContext {\n    fn use_context<T>(&mut self);\n}\n")),Object(r.b)("p",null,"It is recommended to use the macro instead of interfacing with the trait\ndirectly."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-rust",metastring:'title="Definition"',title:'"Definition"'}),"use_context!($manager:expr) => {\n    UseContext::use_context($manager);\n}\n")),Object(r.b)("h2",{id:"roadmap"},"Roadmap"),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"There are some open issues related to the memory model of context. If you have\nthoughts, please let us know on\n",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/polyhorn/polyhorn"}),"our Github"),"."),Object(r.b)("ol",{parentName:"div"},Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Should ",Object(r.b)("inlineCode",{parentName:"p"},"T")," be cloned once and made available to downstream components as a\nregular reference? Or should it be reference counted? If it is reference\ncounted, who is responsible for creating the ",Object(r.b)("inlineCode",{parentName:"p"},"Rc<T>"),"?")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"We should make it easier to pass a ",Object(r.b)("inlineCode",{parentName:"p"},"Reference<T>")," as the value of a\n",Object(r.b)("inlineCode",{parentName:"p"},"ContextProvider<T>"),", since this will probably be a common construct:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-rust"}),'let ws = use_reference!(manager, WebSocket::connect("..."));\n\npoly!(<ContextProvider value=ws>\n    ...\n</ContextProvider>)\n')))))))}l.isMDXComponent=!0}}]);