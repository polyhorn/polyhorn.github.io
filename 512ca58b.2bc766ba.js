(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{130:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,d=u["".concat(s,".").concat(b)]||u[b]||m[b]||r;return n?o.a.createElement(d,i(i({ref:t},c),{},{components:n})):o.a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},132:function(e,t,n){"use strict";var a=n(0);t.a=({level:e,path:t})=>a.createElement("p",{style:{display:"flex",alignItems:"center",lineHeight:0}},0==e&&a.createElement("span",{className:"badge badge--danger",style:{marginRight:10}},"Unstable"),1==e&&a.createElement("span",{className:"badge badge--warning",style:{marginRight:10}},"Release Candidate"),function(e){if(!e)return;const t=e.split("/")[0];return a.createElement("a",{href:`https://docs.rs/${t}/*/${e}`,target:"blank"},a.createElement("span",{className:"badge badge--primary"},"Reference \u2192"))}(t))},77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(2),o=n(6),r=(n(0),n(130)),s=n(132),i={id:"ci",title:"Continuous Integration",sidebar_label:"Continuous Integration"},l={unversionedId:"workflow/ci",id:"workflow/ci",isDocsHomePage:!1,title:"Continuous Integration",description:"Organization",source:"@site/docs/general/workflow/ci.md",slug:"/workflow/ci",permalink:"/docs/workflow/ci",editUrl:"https://github.com/polyhorn/polyhorn.github.io/edit/master/docs/general/workflow/ci.md",version:"current",sidebar_label:"Continuous Integration",sidebar:"someSidebar",previous:{title:"Editors",permalink:"/docs/workflow/editors"}},c=[{value:"Organization",id:"organization",children:[]},{value:"Device Matrix",id:"device-matrix",children:[]},{value:"Snapshot Testing",id:"snapshot-testing",children:[]},{value:"UI Automation",id:"ui-automation",children:[{value:"Opening URLs",id:"opening-urls",children:[]},{value:"Sending Push Notifications",id:"sending-push-notifications",children:[]}]}],p={rightToc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)(s.a,{level:0,mdxType:"Status"}),Object(r.b)("h2",{id:"organization"},"Organization"),Object(r.b)("p",null,"In general, tests should be stored in a module ",Object(r.b)("inlineCode",{parentName:"p"},"tests")," that accompanies the\ncode that it tests. It is recommended to prepend the ",Object(r.b)("inlineCode",{parentName:"p"},"#[cfg(test)]")," attribute\nto the module to make sure that your test code does not get included in\nproduction builds. For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"fn fib(n: usize) -> usize { ... }\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[polyhorn::test]\n    fn test_fib() {\n        assert_eq!(test_fib(2), 4);\n    }\n}\n")),Object(r.b)("p",null,"Running ",Object(r.b)("inlineCode",{parentName:"p"},"polyhorn test")," will run this test on the default device of each\nplatform that you enable in your ",Object(r.b)("inlineCode",{parentName:"p"},"Polyhorn.toml"),". You can extend the set of\ndevices that your app is tested on by updating the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#device-matrix"}),"device matrix")," in your ",Object(r.b)("inlineCode",{parentName:"p"},"Polyhorn.toml"),"."),Object(r.b)("h2",{id:"device-matrix"},"Device Matrix"),Object(r.b)("p",null,"It is recommended to explicitly specify a set of devices to test your app on\nwhen you run ",Object(r.b)("inlineCode",{parentName:"p"},"polyhorn test"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml",metastring:'title="Polyhorn.toml"',title:'"Polyhorn.toml"'}),'...\n\n[tests]\nios.devices = [ "iPhone Xs + iOS 14.0" ]\nandroid.devices = [ "Pixel + Android 10.0" ]\n')),Object(r.b)("h2",{id:"snapshot-testing"},"Snapshot Testing"),Object(r.b)("p",null,"Snapshot testing is best explained using an example. In this example, we first\nwrite a simple component called ",Object(r.b)("inlineCode",{parentName:"p"},"App"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"use polyhorn::prelude::*;\n\n#[derive(Default)]\npub struct App {}\n\nimpl Component for App {\n    fn render(&self, manager: &mut Manager) -> Element { ... }\n}\n")),Object(r.b)("p",null,"Now, we can return an element from our test and turn it into a snapshot test:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"#[polyhorn::test]\nfn test_app() -> Element {\n    poly!(<App />)\n}\n")),Object(r.b)("p",null,"Alternatively, the same test can also be generated in one line with\n",Object(r.b)("inlineCode",{parentName:"p"},"polyhorn::snapshot!(test_app, <App />)"),"."),Object(r.b)("p",null,"Generated snapshots are stored in ",Object(r.b)("inlineCode",{parentName:"p"},"target/polyhorn-snapshots/"),". An index is\nstored in ",Object(r.b)("inlineCode",{parentName:"p"},"target/polyhorn-snapshots/Snapshots.toml")," and looks like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml"}),"[9733c3f71057ecc1ee6def2539b7212e3e45ae98]\ndevice = 'iPhone SE (2nd generation)'\nos = 'iOS'\nos_version = '14.0'\nos_appearance = 'light'\ntest_name = 'image_bytes_png::tests::test_app'\nsnapshot_name = 'example'\n\n[...]\n...\n")),Object(r.b)("p",null,"For each snapshot, this file stores metadata about the device and test that\ngenerated the snapshot. The screenshot itself is stored in\n",Object(r.b)("inlineCode",{parentName:"p"},"target/polyhorn-snapshots/[id].png"),"."),Object(r.b)("p",null,"Note: Polyhorn does not compare the snapshots against previous versions. As\nsuch, ",Object(r.b)("strong",{parentName:"p"},"snapshot tests never fail"),". This is a design choice that originates\nfrom the observation that snapshot changes are often deliberate."),Object(r.b)("p",null,"It is not recommended to include the snapshots in git. Instead, if you want\nto integrate snapshot testing in a CI pipeline, write a custom program to\ninterpret the results from ",Object(r.b)("inlineCode",{parentName:"p"},"target/polyhorn-snapshots"),". For example, you might\nwant to store the snapshots in S3."),Object(r.b)("p",null,"In the future, we will release software that we use to compare snapshots across\ndifferent commits in git and to notify when snapshots change."),Object(r.b)("h2",{id:"ui-automation"},"UI Automation"),Object(r.b)("p",null,"We can also write more complicated multi-stage snapshot tests that involve\nsimulating input events to automate the user interface."),Object(r.b)("p",null,"For this, we write a Polyhorn test based on an asynchronous function with a\nsingle argument (the ",Object(r.b)("inlineCode",{parentName:"p"},"Automator"),"). The automator can be used to control the\nuser interface as well as the device itself."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'#[polyhorn::test]\nasync fn test_app(automator: &mut Automator) {\n    // Take a snapshot of the initial state.\n    automator.render(|| <App />).await;\n    automator.snapshot("home").await;\n\n    // Simulate a touch event for a button named "Settings".\n    automator.ui()\n        .button("Settings")\n        .click()\n        .await;\n    automator.snapshot("settings").await;\n}\n')),Object(r.b)("h3",{id:"opening-urls"},"Opening URLs"),Object(r.b)("p",null,"If you want to validate that your URL scheme works, you can use a test like\nthis:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'#[polyhorn::test]\nasync fn test_url_scheme(automator: &mut Automator) {\n    automator.open_url("myscheme://settings").await;\n    \n    // Verify that the text "Settings" is shown.\n    assert!(automator.ui().text("Settings").is_some());\n}\n')),Object(r.b)("p",null,"Similarly, you can test your domain mapping with a test like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'#[polyhorn::test]\nasync fn test_domain(automator: &mut Automator) {\n    automator.open_url("https://mydomain.com/settings").await;\n    \n    // Verify that the text "Settings" is shown.\n    assert!(automator.ui().text("Settings").is_some());\n}\n')),Object(r.b)("h3",{id:"sending-push-notifications"},"Sending Push Notifications"),Object(r.b)("p",null,"If you want to simulate a push notification, you can use a test like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'#[polyhorn::test]\nasync fn test_push(automator: &mut Automator) {\n    automator.push()\n        .message("Hello World!")\n        .send()\n        .await;\n    \n    // Verify that the text "New Message" is shown.\n    assert!(automator.ui().text("New Message").is_some());\n}\n')))}u.isMDXComponent=!0}}]);